@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.FluentUI.AspNetCore.Components

@inherits FluentGridFilterBase<TGridItem, TProp>
@typeparam TGridItem
@typeparam TProp
<FluentStack Orientation="Orientation.Vertical">
    <FluentCombobox Placeholder="Make a selection..."
                    Items="@Items"
                    Label="Best song"
                    Autofocus="true"
                    @bind-Value="@SelectedValue"
                    Height="200px"
                    Immediate ImmediateDelay="100" />

    <!-- Button with Search Icon -->
    @if (ShowSearchButton)
    {
        <FluentButton Appearance="@SearchButtonAppearance" @onclick=@HandleSearch>
            <FluentIcon Value="@SearchIcon" />
        </FluentButton>
    }

    <!-- Button with Clear Icon -->
    @if (ShowClearButton)
    {
        <FluentButton Appearance="@ClearButtonAppearance" @onclick=@OnClear>
            <FluentIcon Value="@ClearIcon" />
        </FluentButton>
    }

</FluentStack>

@code {


    /// <summary>
    /// Gets the selected value
    /// </summary>
    public string SelectedValue { get; protected set; } = default;

    /// <summary>
    /// Gets or sets the items from the grid that will be used to populate the list
    /// </summary>
    [Parameter]
    public required IQueryable<TGridItem> GridItems { get; set; }

    /// <summary>
    /// Gets the items in the specified property
    /// </summary>
    public IQueryable<TProp> Items { get; private set; }

    protected override void OnInitialized()
    {
        Items = GridItems.Select(Property);
    }

    /// <summary>
    /// Handles the click event of the search button.
    /// </summary>
    private async Task HandleSearch()
    {

        await HandleTextSearch(SelectedValue);

    }

}
