@using Microsoft.FluentUI.AspNetCore.Components
@inherits FluentGridFilterBase<TGridItem, TProp>
@typeparam TGridItem
@typeparam TProp

<FluentStack Orientation="Orientation.Vertical">
    @if (HasError)
    {
        <FluentMessageBar itemref="bar" Title="Data Error" Intent="@MessageIntent.Error" AllowDismiss="false">
            Error: Value is required
        </FluentMessageBar>
    }

    @* Filter and stack vertically *@
    @foreach (var filterValue in FilterValues)
    {
        <FluentStack VerticalAlignment="VerticalAlignment.Center">

            <FluentStack HorizontalAlignment="HorizontalAlignment.Start">
                <FluentCombobox Items=@Operator
                                TOption="Option<ComparisonOperator>"
                                OptionText="@(i => i.Text)"
                                OptionValue="@(i => i.Value.ToString())"
                                Width="150px"
                                @bind-Value=filterValue.ComparisonOperator />
            </FluentStack>

            <FluentStack HorizontalAlignment="HorizontalAlignment.Stretch">
                @switch (DataType)
                {
                    case FilterDataType.Numeric:
                        <FluentNumberField Placeholder="@Placeholder" @bind-Value=filterValue.NumberValue Style="@InputStyle" Required="true" />
                    break;
                    case FilterDataType.DateTime:
                        <FluentDatePicker Placeholder="@Placeholder" @bind-Value=filterValue.DateTimeValue Style="@InputStyle" Required="true" />
                        break;
                    default:
                        <FluentTextField Placeholder="@Placeholder" @bind-Value=filterValue.StringValue Style="@InputStyle" Required="true" />
                        break;
                }
            </FluentStack>

            <FluentStack HorizontalAlignment="HorizontalAlignment.End">
                <FluentMenuButton Text="+" Items="@items" OnMenuChanged="HandleOnMenuChanged">
                </FluentMenuButton>
            </FluentStack>


        </FluentStack>

        @if (filterValue != FilterValues.Last())
        {
            <FluentStack HorizontalAlignment="HorizontalAlignment.Center">
                <span>@filterValue.BinaryExpression?.ToUpper()</span>
            </FluentStack>
        }

    }

    <FluentStack HorizontalAlignment="HorizontalAlignment.End" Gap="10px">

        <!-- Button with Search Icon -->
        @if (ShowSearchButton)
        {
            <FluentButton Appearance="@SearchButtonAppearance" Title="@SearchButtonTooltip" @onclick=HandleSearch>
                <FluentIcon Value="@SearchIcon" />
            </FluentButton>
        }

        <!-- Button with Clear Icon -->
        @if (ShowClearButton)
        {
            <FluentButton Appearance="@ClearButtonAppearance" Title="@ClearButtonTooltip" @onclick=OnClear>
                <FluentIcon Value="@ClearIcon" />
            </FluentButton>
        }
    </FluentStack>
    <FluentMenuProvider />
</FluentStack>

@code {



}
